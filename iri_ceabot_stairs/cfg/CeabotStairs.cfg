#! /usr/bin/env python
#*  All rights reserved.
#*
#*  Redistribution and use in source and binary forms, with or without
#*  modification, are permitted provided that the following conditions
#*  are met:
#*
#*   * Redistributions of source code must retain the above copyright
#*     notice, this list of conditions and the following disclaimer.
#*   * Redistributions in binary form must reproduce the above
#*     copyright notice, this list of conditions and the following
#*     disclaimer in the documentation and/or other materials provided
#*     with the distribution.
#*   * Neither the name of the Willow Garage nor the names of its
#*     contributors may be used to endorse or promote products derived
#*     from this software without specific prior written permission.
#*
#*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#*  POSSIBILITY OF SUCH DAMAGE.
#***********************************************************

# Author:

PACKAGE='iri_ceabot_stairs'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

#       Name                       Type       Reconfiguration level            Description                       Default   Min   Max
#gen.add("velocity_scale_factor",  double_t,  0,                               "Maximum velocity scale factor",  0.5,      0.0,  1.0)
gen.add("Y_SWAP_AMPLITUDE",        double_t,  0,                               "Y swap amplitude (m)",                0.025,    0,      0.050)
gen.add("Z_SWAP_AMPLITUDE",        double_t,  0,                               "X swap amplitude (m)",                0.005,    0,      0.050)
gen.add("ARM_SWING_GAIN",          double_t,  0,                               "Arm swing gain",                      1.5,      0,      10.0)
gen.add("PELVIS_OFFSET",           double_t,  0,                               "Pelvis offset (rad)",                 0.052,    0,      0.52)
gen.add("HIP_PITCH_OFFSET",        double_t,  0,                               "Hip pitch offset (rad)",              0.174,    0,      0.52)
gen.add("X_OFFSET",                double_t,  0,                               "X offset (m)",                        -0.025,   -0.050, 0.050)
gen.add("Y_OFFSET",                double_t,  0,                               "Y offset (m)",                        0.0075,   -0.050, 0.050)
gen.add("Z_OFFSET",                double_t,  0,                               "Z offset (m)",                        0.010,    -0.050, 0.050)
gen.add("A_OFFSET",                double_t,  0,                               "A offset (rad)",                      0,        -0.52,  0.52)
gen.add("P_OFFSET",                double_t,  0,                               "P offset (rad)",                      0,        -0.52,  0.52)
gen.add("R_OFFSET",                double_t,  0,                               "R offset (rad)",                      0,        -0.52,  0.52)
gen.add("PERIOD_TIME",             double_t,  0,                               "Period (s)",                          0.6,      0,      1.0)
gen.add("DSP_RATIO",               double_t,  0,                               "Double support ratio",                0.1,      0,      1.0)
gen.add("STEP_FB_RATIO",           double_t,  0,                               "Step forward/backward ratio",         0.3,      0,      1.0)
gen.add("FOOT_HEIGHT",             double_t,  0,                               "Foot height (m)",                     0.04,     0,      0.050)
gen.add("MAX_VEL",                 double_t,  0,                               "Maximum linear velocity (m/s)",       0.01,     0,      1.0)
gen.add("MAX_ROT_VEL",             double_t,  0,                               "Maximum rotational velocity (rad/s)", 0.1,     0,      1.0)


gen.add("PAN_ANGLE",               double_t,   0,                              "Pan Angle for head tracking",      0.0,      -3.14159,    3.14159)
gen.add("TILT_ANGLE",              double_t,   0,                              "Tilt Angle for head tracking",      0.0,      -3.14159,    3.14159)
gen.add("pan_p",                   double_t,  0,                               "Desired pan kp",                 0.1,      0.0,  0.28)
gen.add("pan_i",                   double_t,  0,                               "Desired pan ki",                 0.0,      0.0,  0.28)
gen.add("pan_d",                   double_t,  0,                               "Desired pan kd",                 0.0,      0.0,  0.28)
gen.add("update_pan_pid",          bool_t,    0,                               "Update pan pid",                 False)
gen.add("pan_i_clamp",             double_t,  0,                               "Desired pan integral limit",     0.0,      0.0,  0.28)
gen.add("max_pan",                 double_t,  0,                               "Maximum pan angle",              3.14159,  -3.14159,  3.14159)
gen.add("min_pan",                 double_t,  0,                               "Minimum pan angle",              -3.14159, -3.14159,  3.14159)
gen.add("tilt_p",                  double_t,  0,                               "Desired tilt kp",                0.1,      0.0,  0.28)
gen.add("tilt_i",                  double_t,  0,                               "Desired tilt ki",                0.0,      0.0,  0.28)
gen.add("tilt_d",                  double_t,  0,                               "Desired tilt kd",                0.0,      0.0,  0.28)
gen.add("update_tilt_pid",         bool_t,    0,                               "Update tilt pid",                False)
gen.add("tilt_i_clamp",            double_t,  0,                               "Desired tilt integral limit",    0.0,      0.0,  0.28)
gen.add("max_tilt",                double_t,  0,                               "Maximum tilt angle",              3.14159,  -3.14159,  3.14159)
gen.add("min_tilt",                double_t,  0,                               "Minimum tilt angle",              -3.14159, -3.14159,  3.14159)

gen.add("ERROR_PERMES",            double_t,     0,                            "Error permes en el moviment/gir",                        0.15,        0.09,        0.261799387)
gen.add("MAX_UPPER_LIMIT",         double_t,     0,                            "Limit superior per a la SAT. positiva",                        0.1,        -3.141592654,        +3.141592654)
gen.add("MIN_UPPER_LIMIT",         double_t,     0,                            "Limit inferior per a la SAT. positiva",                        0.01,        -3.141592654,        +3.141592654)
gen.add("MAX_LOWER_LIMIT",         double_t,     0,                            "Limit superior per a la SAT. negativa",                        -0.1,        -3.141592654,        +3.141592654)
gen.add("MIN_LOWER_LIMIT",         double_t,     0,                            "Limit inferior per a la SAT. negativa",                        -0.01,        -3.141592654,        +3.141592654)
gen.add("p",                       double_t,     0,                            "Proporcional",                        0.05,        0,        1)
gen.add("x_step",                  double_t,     0,                            "Movement X Step",                     0.005,       0,        0.2)
gen.add("x_step2",                 double_t,     0,                            "Movement X Step phase 2",             0.005,       0,        0.2)

exit(gen.generate(PACKAGE, "CeabotStairsAlgorithm", "CeabotStairs"))
